# https://taskfile.dev

version: '3'

vars:
  GIT_DIR: { sh: git rev-parse --show-toplevel }


tasks:
  master:
    desc: Deploy administration resources to a fresh k8s cluster (MASTER/HUB).
    env:
      KUBECONFIG: '{{.GIT_DIR}}/kubeconfig.master'
    cmds:
      - kubectl apply -k "{{.GIT_DIR}}/administration/resources/argocd/overlays/current"
      - kubectl wait --for=condition=available deployment -l "app.kubernetes.io/name=argocd-server" -n argocd --timeout=300s
    preconditions:
      - test -f {{.GIT_DIR}}/kubeconfig.master

  slave:
    desc: Create required ArgoCD bootstrap permissions, service accounts and secrets.
    dir: '{{.USER_WORKING_DIR}}'
    vars:
      CLUSTER_NAME: 
        sh: basename "{{.USER_WORKING_DIR}}"
      CLUSTER_ENV: 
        sh: basename $(dirname $(dirname $PWD))
    env:
      KUBECONFIG: '{{.USER_WORKING_DIR}}/kubeconfig'
    preconditions:
      - test -f {{.USER_WORKING_DIR}}/kubeconfig
      - test ! -f  {{.USER_WORKING_DIR}}/token.yaml
      - sh: '[ "$(basename $(dirname $PWD))" = "clusters" ]'  
    cmds:
      - |
        cat <<EOF | kubectl apply -n kube-system  -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: argocd-manager
          namespace: kube-system
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: argocd-manager-role
          namespace: kube-system
        rules:
        - apiGroups:
          - '*'
          resources:
          - '*'
          verbs:
          - '*'
        - nonResourceURLs:
          - '*'
          verbs:
          - '*'
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: argocd-manager-role-binding
          namespace: kube-system
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: argocd-manager-role
        subjects:
        - kind: ServiceAccount
          name: argocd-manager
          namespace: kube-system
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            kubernetes.io/service-account.name: argocd-manager
          name: argocd-manager-token
          namespace: kube-system
        type: kubernetes.io/service-account-token
        EOF
      - sleep 5
      - |
        CA=$(kubectl -n kube-system get secret/argocd-manager-token -o jsonpath='{.data.ca\.crt}')
        TOKEN=$(kubectl -n kube-system get secret/argocd-manager-token -o jsonpath='{.data.token}' | base64 --decode)
        SERVER="$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")"
        cat <<EOF> token.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: {{.CLUSTER_NAME}}-cluster-token
          namespace: argocd
          labels:
            env_name: {{.CLUSTER_ENV}}
            argocd.argoproj.io/secret-type: cluster
        type: Opaque
        stringData:
          name: {{.CLUSTER_NAME}}
          server: $SERVER
          config: |
            {
              "bearerToken": "$TOKEN",
              "tlsClientConfig": {
                "serverName": "kubernetes.default.svc",
                "insecure": true,
                "ca": "$CA"
              }
            }
        EOF